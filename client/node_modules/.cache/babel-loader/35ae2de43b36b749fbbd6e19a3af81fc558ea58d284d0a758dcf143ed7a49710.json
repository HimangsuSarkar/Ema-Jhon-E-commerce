{"ast":null,"code":"var _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { useStripe, useElements, PaymentElement } from '@stripe/react-stripe-js';\nconst CheckoutForm = () => {\n  _s();\n  const stripe = useStripe();\n  const elements = useElements();\n  const [paymentError, setPaymentError] = useState(null);\n  const handleSubmit = async event => {\n    // We don't want to let default form submission happen here,\n    // which would refresh the page.\n    event.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js has not yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded\n      return;\n    }\n    const result = await stripe.confirmPayment({\n      //`Elements` instance that was used to create the Payment Element\n      elements,\n      confirmParams: {\n        return_url: \"https://example.com/order/123/complete\"\n      }\n    });\n    if (result.error) {\n      // Show error to your customer (for example, payment details incomplete)\n      setPaymentError(result.error.message);\n    } else {}\n  };\n  return d;\n};\n_s(CheckoutForm, \"Gz2uD+66yFCbd2fx/dtVdo+WgIc=\", false, function () {\n  return [useStripe, useElements];\n});\n_c = CheckoutForm;\nexport default CheckoutForm;\nvar _c;\n$RefreshReg$(_c, \"CheckoutForm\");","map":{"version":3,"names":["React","useState","useStripe","useElements","PaymentElement","CheckoutForm","_s","stripe","elements","paymentError","setPaymentError","handleSubmit","event","preventDefault","result","confirmPayment","confirmParams","return_url","error","message","d","_c","$RefreshReg$"],"sources":["D:/Thesis/ema-jhon-e-commerce/src/components/ProcessPayment/CheckoutForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\nimport {useStripe, useElements, PaymentElement} from '@stripe/react-stripe-js';\r\n\r\nconst CheckoutForm = () => {\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  const [paymentError, setPaymentError] = useState(null);\r\n\r\n  const handleSubmit = async (event) => {\r\n    // We don't want to let default form submission happen here,\r\n    // which would refresh the page.\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not yet loaded.\r\n      // Make sure to disable form submission until Stripe.js has loaded\r\n      return;\r\n    }\r\n\r\n    const result = await stripe.confirmPayment({\r\n      //`Elements` instance that was used to create the Payment Element\r\n      elements,\r\n      confirmParams: {\r\n        return_url: \"https://example.com/order/123/complete\",\r\n      },\r\n    });\r\n\r\n    if (result.error) {\r\n      // Show error to your customer (for example, payment details incomplete)\r\n      setPaymentError(result.error.message);\r\n    } else {\r\n     \r\n    }\r\n  };\r\n\r\n  return (\r\n    d\r\n  )\r\n};\r\n\r\nexport default CheckoutForm;"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,SAAQC,SAAS,EAAEC,WAAW,EAAEC,cAAc,QAAO,yBAAyB;AAE9E,MAAMC,YAAY,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACzB,MAAMC,MAAM,GAAGL,SAAS,EAAE;EAC1B,MAAMM,QAAQ,GAAGL,WAAW,EAAE;EAE9B,MAAM,CAACM,YAAY,EAAEC,eAAe,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMU,YAAY,GAAG,MAAOC,KAAK,IAAK;IACpC;IACA;IACAA,KAAK,CAACC,cAAc,EAAE;IAEtB,IAAI,CAACN,MAAM,IAAI,CAACC,QAAQ,EAAE;MACxB;MACA;MACA;IACF;IAEA,MAAMM,MAAM,GAAG,MAAMP,MAAM,CAACQ,cAAc,CAAC;MACzC;MACAP,QAAQ;MACRQ,aAAa,EAAE;QACbC,UAAU,EAAE;MACd;IACF,CAAC,CAAC;IAEF,IAAIH,MAAM,CAACI,KAAK,EAAE;MAChB;MACAR,eAAe,CAACI,MAAM,CAACI,KAAK,CAACC,OAAO,CAAC;IACvC,CAAC,MAAM,CAEP;EACF,CAAC;EAED,OACEC,CAAC;AAEL,CAAC;AAACd,EAAA,CApCID,YAAY;EAAA,QACDH,SAAS,EACPC,WAAW;AAAA;AAAAkB,EAAA,GAFxBhB,YAAY;AAsClB,eAAeA,YAAY;AAAC,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}